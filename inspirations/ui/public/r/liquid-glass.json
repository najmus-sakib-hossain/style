{
  "name": "liquid-glass",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "ui/liquid-glass.tsx",
      "content": "\"use client\"\n\nimport React, { useCallback, useEffect, useRef, useState } from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst smoothStep = (a: number, b: number, t: number): number => {\n  t = Math.max(0, Math.min(1, (t - a) / (b - a)))\n  return t * t * (3 - 2 * t)\n}\n\nconst length = (x: number, y: number): number => {\n  return Math.sqrt(x * x + y * y)\n}\n\nconst roundedRectSDF = (\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  radius: number\n): number => {\n  const qx = Math.abs(x) - width + radius\n  const qy = Math.abs(y) - height + radius\n  return (\n    Math.min(Math.max(qx, qy), 0) +\n    length(Math.max(qx, 0), Math.max(qy, 0)) -\n    radius\n  )\n}\n\ninterface UV {\n  x: number\n  y: number\n}\n\n// Created by manfromexistence - https://x.com/manfrexistence\nexport const LiquidGlass = ({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\">) => {\n  const containerRef = useRef<HTMLDivElement>(null)\n  const [width, setWidth] = useState(1)\n  const [height, setHeight] = useState(1)\n\n  useEffect(() => {\n    const element = containerRef.current\n    if (!element) return\n\n    setWidth(element.offsetWidth)\n    setHeight(element.offsetHeight)\n\n    const resizeObserver = new ResizeObserver(entries => {\n      if (entries[0]) {\n        const { width, height } = entries[0].contentRect\n        setWidth(width)\n        setHeight(height)\n      }\n    })\n\n    resizeObserver.observe(element)\n\n    return () => {\n      resizeObserver.disconnect()\n    }\n  }, [])\n\n  const canvasRef = useRef<HTMLCanvasElement | null>(null)\n  const feImageRef = useRef<SVGFEImageElement | null>(null)\n  const feDisplacementMapRef = useRef<SVGFEDisplacementMapElement | null>(null)\n\n  const filterId = useRef(\n    \"liquid-glass-\" + Math.random().toString(36).slice(2, 11)\n  )\n\n  const [distortWidth] = useState(0.3)\n  const [distortHeight] = useState(0.2)\n  const [distortRadius] = useState(0.6)\n  const [smoothStepEdge] = useState(0.8)\n  const [distanceOffset] = useState(0.15)\n\n  const updateShader = useCallback(() => {\n    if (\n      !canvasRef.current ||\n      !feImageRef.current ||\n      !feDisplacementMapRef.current ||\n      width <= 1 ||\n      height <= 1\n    )\n      return\n\n    const canvas = canvasRef.current\n    const context = canvas.getContext(\"2d\")\n    if (!context) return\n\n    const canvasDPI = 1\n    const w = Math.floor(width * canvasDPI)\n    const h = Math.floor(height * canvasDPI)\n    if (w <= 0 || h <= 0) return;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    const data = new Uint8ClampedArray(w * h * 4)\n    let maxScale = 0\n    const rawValues: number[] = []\n\n    const fragment = (uv: UV) => {\n      const ix = uv.x - 0.5\n      const iy = uv.y - 0.5\n      const distanceToEdge = roundedRectSDF(\n        ix,\n        iy,\n        distortWidth,\n        distortHeight,\n        distortRadius\n      )\n      const displacement = smoothStep(\n        smoothStepEdge,\n        0,\n        distanceToEdge - distanceOffset\n      )\n      const scaled = smoothStep(0, 1, displacement)\n      return { x: ix * scaled + 0.5, y: iy * scaled + 0.5 }\n    }\n\n    for (let i = 0; i < w * h; i++) {\n      const x = i % w\n      const y = Math.floor(i / w)\n      const pos = fragment({ x: x / w, y: y / h })\n      const dx = pos.x * w - x\n      const dy = pos.y * h - y\n      maxScale = Math.max(maxScale, Math.abs(dx), Math.abs(dy))\n      rawValues.push(dx, dy)\n    }\n\n    maxScale *= 0.5\n\n    let dataIndex = 0\n    let rawValueIndex = 0\n    for (let i = 0; i < w * h; i++) {\n      const r = rawValues[rawValueIndex++] / maxScale + 0.5\n      const g = rawValues[rawValueIndex++] / maxScale + 0.5\n      data[dataIndex++] = r * 255\n      data[dataIndex++] = g * 255\n      data[dataIndex++] = 0\n      data[dataIndex++] = 255\n    }\n\n    context.putImageData(new ImageData(data, w, h), 0, 0)\n\n    feImageRef.current.setAttributeNS(\n      \"http://www.w3.org/1999/xlink\",\n      \"href\",\n      canvas.toDataURL()\n    )\n    feDisplacementMapRef.current.setAttribute(\n      \"scale\",\n      (maxScale / canvasDPI).toString()\n    )\n  }, [\n    width,\n    height,\n    distortWidth,\n    distortHeight,\n    distortRadius,\n    smoothStepEdge,\n    distanceOffset,\n  ])\n\n  useEffect(() => {\n    updateShader()\n  }, [updateShader])\n\n  return (\n    <>\n      <svg\n        width=\"0\"\n        height=\"0\"\n        style={{\n          position: \"fixed\",\n          pointerEvents: \"none\",\n          zIndex: -1,\n        }}\n      >\n        <defs>\n          <filter\n            id={filterId.current}\n            filterUnits=\"userSpaceOnUse\"\n            colorInterpolationFilters=\"sRGB\"\n            x=\"0\"\n            y=\"0\"\n            width={width}\n            height={height}\n          >\n            <feImage\n              ref={feImageRef}\n              width={width}\n              height={height}\n              result={filterId.current + \"_map\"}\n            />\n            <feDisplacementMap\n              ref={feDisplacementMapRef}\n              in=\"SourceGraphic\"\n              in2={filterId.current + \"_map\"}\n              xChannelSelector=\"R\"\n              yChannelSelector=\"G\"\n              scale=\"0\"\n            />\n          </filter>\n        </defs>\n      </svg>\n\n      <div\n        ref={containerRef}\n        style={{\n          filter:\n            `url(#${filterId.current}) blur(0.25px) contrast(1.2) brightness(1.05) saturate(1.1)`,\n          boxShadow:\n            \"0 4px 8px rgba(0, 0, 0, 0.25), 0 -10px 25px inset rgba(0, 0, 0, 0.15)\",\n        }}\n        className={cn(\n          \"flex h-64 w-64 items-center justify-center rounded-full border\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n\n      <canvas\n        ref={canvasRef}\n        width={width}\n        height={height}\n        style={{ display: \"none\" }}\n      />\n    </>\n  )\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}